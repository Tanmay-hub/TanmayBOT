import { useState, useEffect, useRef } from 'react';
import { Send, User, MessageCircle } from 'lucide-react';
import ReactMarkdown from "react-markdown";
import photo from './photo.png';

const TanmayBot = () => {
  const [messages, setMessages] = useState([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);
  const inputRef = useRef(null);
  const [isAboutOpen, setIsAboutOpen] = useState(true); 

  const openAbout = () => setIsAboutOpen(true);
  const closeAbout = () => setIsAboutOpen(false);


  // Load chat history from localStorage on component mount
  useEffect(() => {
    const savedMessages = localStorage.getItem('tanmaybot-messages');
    if (savedMessages) {
      try {
        setMessages(JSON.parse(savedMessages));
      } catch (error) {
        console.error('Error loading saved messages:', error);
      }
    }
  }, []);

  // Save messages to localStorage whenever messages change
  useEffect(() => {
    if (messages.length > 0) {
      localStorage.setItem('tanmaybot-messages', JSON.stringify(messages));
    }
  }, [messages]);

  // Auto-scroll to bottom when new messages are added
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Focus input on mount
  useEffect(() => {
    inputRef.current?.focus();
  }, []);

  const handleSubmit = async (e) => {
    if (e) e.preventDefault();
    if (!inputValue.trim() || isLoading) return;

    const userMessage = { role: 'user', content: inputValue.trim(), timestamp: Date.now() };
    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsLoading(true);

    try {
      const response = await fetch(process.env.REACT_APP_FLASK_URL + '/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ question: userMessage.content, history: messages }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      const botMessage = {
        role: 'assistant',
        content: data.response,
        timestamp: Date.now()
      };
      setMessages(prev => [...prev, botMessage]);
    } catch (error) {
      console.error('Error calling chat API:', error);
      const errorMessage = {
        role: 'assistant',
        content: 'Sorry, I encountered an error while processing your request. Please try again.',
        timestamp: Date.now(),
        isError: true
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const clearChat = () => {
    setMessages([]);
    localStorage.removeItem('tanmaybot-messages');
    inputRef.current?.focus();
  };

  return (
    <div className="container">
      {/* Header */}
      <div className="header">
        <div className="headerContent">
          <div className="headerLeft">
            <img src={photo} alt="" className="profileImg" />
            <div>
              <h1 className="title">TanmayBOT</h1>
            </div>
          </div>
          <div className="headerRight">
            <button onClick={clearChat} className="clearButton">
              Clear Chat
            </button>
            <button onClick={openAbout} className="aboutButton">
              About the App
            </button>
            <button onClick = {() => window.open('https://www.linkedin.com/in/tanmay-bothra-705617168/', '_blank', 'noopener,noreferrer')} className="linkedInButton">
              My LinkedIn
            </button>
            <button onClick = {() => window.open('https://github.com/Tanmay-hub', '_blank', 'noopener,noreferrer')} className="linkedInButton">
              My Github
            </button>
          </div>
        </div>
        {isAboutOpen && (
          <div className="modalOverlay">
            <div className="modalContent">
              <h2>About TanmayBOT</h2>
              <p>                
                1) <b>Welcome to TanmayBOT!</b> My name is Tanmay Bothra, and I am looking for full-time roles or internships in software engineering, data science, finance, or analytics. TanmayBOT is a <b>chatbot personification of me</b> that can answer questions about my <b>work experience, personal projects, education, skills, interests, and background.</b>
              </p>
              <p>
                2) Responses are generated by a Large Language Model (LLM) that has access to a knowledge base with details about my life and background. While <b>information provided by TanmayBOT will be accurate</b>, it does not have access to every detail about me and <b>may not know the answer to some questions</b>. The <b>style and personality</b> behind these LLM-generated responses <b>don't necessarily reflect my own</b>.
              </p>
              <p>
                3) Allow TanmayBOT <b>a maximum of 15 seconds</b> to respond.
              </p>
              <button onClick={closeAbout} className="closeButton">
                Close
              </button>
            </div>
          </div>
        )}
      </div>

      {/* Messages Container */}
      <div className="messagesContainer">
        <div className="messagesScroll">
          <div className="messagesContent">
            {messages.length === 0 ? (
              <div className="emptyState">
                <div className="emptyIcon">
                  <MessageCircle size={48} color="#9ca3af" />
                </div>
                <h2 className="emptyTitle">Welcome to TanmayBOT</h2>
                <p className="emptyText">
                  Hi! I'm a chatbot personification of Tanmay Bothra. Ask me anything about my projects,
                  work experience, skills, education, interests, and background!
                </p>
              </div>
            ) : (
              messages.map((message, index) => (
                <div
                  key={index}
                  className={`messageRow ${message.role === 'user' ? 'userRow' : 'assistantRow'}`}
                >
                  {message.role === 'assistant' && (
                    <img src={photo} width={25} height={25} alt="" />
                  )}
                  <div
                    className={`messageBubble ${message.role === 'user'
                        ? 'userMessage'
                        : message.isError
                          ? 'errorMessage'
                          : 'assistantMessage'
                      }`}
                  >
                    <div>
                      <ReactMarkdown>{message.content}</ReactMarkdown>
                    </div>
                  </div>
                  {message.role === 'user' && (
                    <div className="messageIcon userIcon">
                      <User size={20} color="white" />
                    </div>
                  )}
                </div>
              ))
            )}
            {isLoading && (
              <div className="loadingContainer">
                <img src={photo} width={25} height={25} alt="" />
                <div className="loadingBubble">
                  <div className="loadingDots">
                    <div className="dot" style={{ animationDelay: '0s' }}></div>
                    <div className="dot" style={{ animationDelay: '0.2s' }}></div>
                    <div className="dot" style={{ animationDelay: '0.4s' }}></div>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>
        </div>
      </div>

      {/* Input Container */}
      <div className="inputContainer">
        <div className="inputWrapper">
          <div className="inputGroup">
            <textarea
              ref={inputRef}
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyDown={(e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                  e.preventDefault(); // stop newline
                  handleSubmit(e);
                }
              }}
              placeholder="Ask questions like 'What is your most recent work experience', 'What are your top skills', or 'What do you like to do for fun'"
              className="input"
              disabled={isLoading}
            />
            <button
              onClick={handleSubmit}
              disabled={!inputValue.trim() || isLoading}
              className="sendButton"
              style={{
                opacity: !inputValue.trim() || isLoading ? 0.5 : 1,
                cursor: !inputValue.trim() || isLoading ? 'not-allowed' : 'pointer'
              }}
            >
              <Send size={20} />
            </button>
          </div>
          <div className="inputHint">
            Press Enter to send your message
          </div>
        </div>
      </div>
    </div>
  );
}

export default TanmayBot;
